// Generated by CoffeeScript 1.6.1
(function() {
  var ALARM_NAME, Chromagochi, LIFE_MINUTES, Pet, STORAGE_KEY, TICK_MINUTES, cg, hsl2rgb,
    _this = this;

  TICK_MINUTES = 1;

  ALARM_NAME = 'tick';

  STORAGE_KEY = 'chromagochi';

  LIFE_MINUTES = 120;

  hsl2rgb = function(H, S, L) {
    var B, B1, C, G, G1, H_, R, R1, X, m;
    C = (1 - Math.abs((2 * L) - 1)) * S;
    H_ = H / 60;
    X = C * (1 - Math.abs((H_ % 2) - 1));
    if (H === void 0 || isNaN(H) || H === null) {
      R1 = G1 = B1 = 0;
    } else {
      if (H_ >= 0 && H_ < 1) {
        R1 = C;
        G1 = X;
        B1 = 0;
      } else if (H_ >= 1 && H_ < 2) {
        R1 = X;
        G1 = C;
        B1 = 0;
      } else if (H_ >= 2 && H_ < 3) {
        R1 = 0;
        G1 = C;
        B1 = X;
      } else if (H_ >= 3 && H_ < 4) {
        R1 = 0;
        G1 = X;
        B1 = C;
      } else if (H_ >= 4 && H_ < 5) {
        R1 = X;
        G1 = 0;
        B1 = C;
      } else if (H_ >= 5 && H_ < 6) {
        R1 = C;
        G1 = 0;
        B1 = X;
      }
    }
    m = L - (C / 2);
    R = (R1 + m) * 255;
    G = (G1 + m) * 255;
    B = (B1 + m) * 255;
    R = Math.round(R);
    G = Math.round(G);
    B = Math.round(B);
    return {
      R: R,
      G: G,
      B: B
    };
  };

  Pet = (function() {

    Pet.prototype["default"] = {
      name: 'Chromagochi',
      happiness: LIFE_MINUTES
    };

    Pet.prototype.status = {};

    function Pet(callback) {
      var self,
        _this = this;
      this.load = function(callback) {
        return Pet.prototype.load.apply(_this, arguments);
      };
      this.update = function() {
        return Pet.prototype.update.apply(_this, arguments);
      };
      this.age = function(minutes) {
        return Pet.prototype.age.apply(_this, arguments);
      };
      this.feed = function() {
        return Pet.prototype.feed.apply(_this, arguments);
      };
      self = this;
      this.load(function() {
        if (callback != null) {
          callback();
        }
        return self.update();
      });
    }

    Pet.prototype.isAlive = function() {
      return this.status.happiness > 0;
    };

    Pet.prototype.feed = function() {
      this.status.happiness = this["default"].happiness;
      this.save();
      return this.update();
    };

    Pet.prototype.age = function(minutes) {
      this.status.happiness--;
      this.save();
      return this.update();
    };

    Pet.prototype.update = function() {
      var c, l;
      chrome.browserAction.setBadgeText({
        text: this.status.happiness + ''
      });
      l = Math.log(this.status.happiness) / 3;
      c = hsl2rgb(0, 1, l);
      chrome.browserAction.setBadgeBackgroundColor({
        color: [c.R, c.G, c.B, 255]
      });
      return true;
    };

    Pet.prototype.clone = function(object) {
      return JSON.parse(JSON.stringify(object));
    };

    Pet.prototype.load = function(callback) {
      var self;
      self = this;
      chrome.storage.local.get(STORAGE_KEY, function(items) {
        self.status = items[STORAGE_KEY] || self.clone(self["default"]);
        if (callback != null) {
          return callback();
        }
      });
      return true;
    };

    Pet.prototype.save = function(callback) {
      var data;
      data = {};
      data[STORAGE_KEY] = this.status;
      return chrome.storage.local.set(data, function() {
        if (callback != null) {
          return callback();
        }
      });
    };

    return Pet;

  })();

  Chromagochi = (function() {

    Chromagochi.prototype.pet = null;

    function Chromagochi() {
      var self,
        _this = this;
      this.processAlarm = function(alarm) {
        return Chromagochi.prototype.processAlarm.apply(_this, arguments);
      };
      self = this;
      this.pet = new Pet(null);
      chrome.browserAction.onClicked.addListener(function(tab) {
        return self.pet.feed();
      });
      chrome.alarms.onAlarm.addListener(this.processAlarm);
      true;
    }

    Chromagochi.prototype.start = function() {
      chrome.alarms.create(ALARM_NAME, {
        periodInMinutes: TICK_MINUTES
      });
      return true;
    };

    Chromagochi.prototype.stop = function() {
      chrome.alarms.clear(ALARM_NAME);
      return true;
    };

    Chromagochi.prototype.processAlarm = function(alarm) {
      if (alarm.name === ALARM_NAME) {
        if (this.pet.isAlive()) {
          return this.pet.age(alarm.periodInMinutes);
        }
      }
    };

    return Chromagochi;

  })();

  cg = new Chromagochi;

  cg.start();

}).call(this);
